package eu.zujev.milovidobot.commmandGroups

import eu.zujev.milovidobot.DB
import eu.zujev.milovidobot.Milovidobot
import eu.zujev.milovidobot.lib.Const
import eu.zujev.milovidobot.lib.Func
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton

class PrivateHandler extends Milovidobot {
    static db = DB.getInstance()

    Boolean processUpdate(Update update) {
        println 'processing private query'
        db = DB.getInstance()

        if (update.hasMessage() && update.getMessage().hasText() && !update.hasCallbackQuery()) {
            def message_text = update.getMessage().getText()
            if (message_text.toLowerCase().startsWith('/start')) {
                //resetDBWait('all', update)
                sendMessage(Const.INTROTEXT, update.getMessage().getChatId().toString(), null, Func.getKeyboard(update.getMessage().getFrom().getId()), null)
            } else if (message_text.toLowerCase().startsWith('/help')) {
                sendMessage(Const.HELPTEXT, update)
            }
        } else if (update.hasCallbackQuery()) {
            def callbackAnswer = Const.CALLBACKREPLIES[new Random().nextInt(Const.CALLBACKREPLIES.size())]
            if (update.getCallbackQuery().getData() == 'newpoem') {
                answerCallbackQuery(update.getCallbackQuery().getId(), callbackAnswer)
                editMessage(Func.randomPoem(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), null)
                Func.saveUsage('poem', update.getCallbackQuery().getFrom().getId())
            } else if (update.getCallbackQuery().getData() == 'newquote') {
                answerCallbackQuery(update.getCallbackQuery().getId(), callbackAnswer)
                editMessage(Func.randomQuote(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), null)
                Func.saveUsage('quote', update.getCallbackQuery().getFrom().getId())
            } else if (update.getCallbackQuery().getData() == 'aboutauthor') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ê –≤–æ—Ç –∏ –∞–≤—Ç–æ—Ä.')
                editMessage(Func.aboutAuthor(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
            } else if (update.getCallbackQuery().getData() == 'donate') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ü–æ–¥–¥–µ—Ä–∂–∏ —Ä—É–±–ª—ë–º.')
                editMessage(Func.donate(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
            } else if (update.getCallbackQuery().getData() == 'addpoem') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ñ–¥—É.')
                resetDBWait('poem', update)
                def cancelKeyboard = getCancelKeyboard()
                editMessage('–ñ–¥—É —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.', update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'addquote') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ñ–¥—É.')
                resetDBWait('quote', update)
                def cancelKeyboard = getCancelKeyboard()
                editMessage('–ñ–¥—É —Ü–∏—Ç–∞—Ç—É.', update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'addauthor') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ñ–¥—É.')
                resetDBWait('author', update)
                def cancelKeyboard = getCancelKeyboard()
                editMessage('–ñ–¥—É —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ. –ü–æ–∫–∞ —á—Ç–æ —Ç—É—Ç —Ç–∞–∫:\n\n' + Func.aboutAuthor(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'adddonate') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ñ–¥—É.')
                resetDBWait('donate', update)
                def cancelKeyboard = getCancelKeyboard()
                editMessage('–ñ–¥—É —Ç–µ–∫—Å—Ç–∞ –æ –¥–æ–Ω–∞—Ç–µ. –ü–æ–∫–∞ —á—Ç–æ —Ç—É—Ç —Ç–∞–∫:\n\n' + Func.donate(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'cancel') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∏–ª.')
                resetDBWait('all', update)
                editMessage(Const.INTROTEXT, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), null)
            } else if (update.getCallbackQuery().getData() == 'stats') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–í–æ—Ç, —á—Ç–æ —è –Ω–∞—Å–æ–±–∏—Ä–∞–ª.')
                editMessage(Func.getStatsText(), update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
            } else if (update.getCallbackQuery().getData() == 'takePartInContest') {
                //if (update.getCallbackQuery().getFrom().getUserName()) {
                    answerCallbackQuery(update.getCallbackQuery().getId(), '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!')
                    //answerCallbackQuery(update.getCallbackQuery().getId(), '–ù–∞—à–∞ –ª—é–±–æ–≤—å –∫ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–µ –≤–∑–∞–∏–º–Ω–∞. –ï—Å–ª–∏ –≤–∞–º —É–ª—ã–±–Ω—ë—Ç—Å—è —É–¥–∞—á–∞, —è –ø—Ä–∏—à–ª—é –æ—Ç–∫—Ä—ã—Ç–∫—É.')
                    db.sadd('usersTakingPartInContest', update.getCallbackQuery().getFrom().getId().toString())
                    editMessage('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n' + Const.INTROTEXT, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
                //} else {
                //    answerCallbackQuery(update.getCallbackQuery().getId(), '–û—Ç–∫—Ä–æ–π –Ω–∞ –º–∏–Ω—É—Ç–∫—É —Å–≤–æ–π –Ω–∏–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
                //    editMessage('–ß—Ç–æ–±—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –æ—Ç–∫—Ä–æ–π —Å–≤–æ–π –Ω–∏–∫. –ò–Ω–∞—á–µ –º–Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π. :(\n\n' + Const.INTROTEXT, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
                //}
            } else if (update.getCallbackQuery().getData() == 'alreadyTakingPartInContest') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–£—Ä–∞!!! ü•≥')
                //answerCallbackQuery(update.getCallbackQuery().getId(), '–£—Ä–∞!!! ‚ù§Ô∏è')
            } else if (update.getCallbackQuery().getData() == 'startcontest') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–¢–æ—á–Ω–æ?')
                def cancelKeyboard = getOkCancelKeyboard('startcontest')
                editMessage('–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –∫–Ω–æ–ø–æ—á–∫–æ–π.', update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'stopcontest') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–¢–æ—á–Ω–æ?')
                def cancelKeyboard = getOkCancelKeyboard('stopcontest')
                editMessage('–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –∫–Ω–æ–ø–æ—á–∫–æ–π.', update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'choosewinner') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π?')
                def cancelKeyboard = getWinnersKeyboard()
                editMessage('–í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à.\n\n–ü–æ–∫–∞ —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ' + db.scard('usersTakingPartInContest') + '.', update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), cancelKeyboard, null)
            } else if (update.getCallbackQuery().getData() == 'ok:startcontest') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!')
                db.set('contest', 'yes')
                db.del('usersTakingPartInContest')
                editMessage('–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞—Ç.\n--\n' + Const.INTROTEXT, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), null)
            } else if (update.getCallbackQuery().getData() == 'ok:stopcontest') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–•–æ—Ä–æ—à–æ, —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
                db.set('contest', 'no')
                db.del('usersTakingPartInContest')
                editMessage('–†–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n--\n' + Const.INTROTEXT, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), null)
            } else if (update.getCallbackQuery().getData() == '1winner') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ü–æ–ª—É—á–∞–π –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!')
                def winner = db.srandmember('usersTakingPartInContest')
                db.del('lastWinners')
                db.sadd('lastWinners', winner)
                db.set('contest', 'no')
                db.del('usersTakingPartInContest')
                String text = '–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è: ' + Func.resolveUsername(winner) + '!\n--\n' + Const.INTROTEXT
                editMessage(text, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
            } else if (update.getCallbackQuery().getData() == '2winners') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ü–æ–ª—É—á–∞–π –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!')
                def winner = db.srandmember('usersTakingPartInContest')
                db.srem('usersTakingPartInContest', winner)
                def winner2 = db.srandmember('usersTakingPartInContest')
                db.del('lastWinners')
                db.sadd('lastWinners', winner)
                db.sadd('lastWinners', winner2)
                db.set('contest', 'no')
                db.del('usersTakingPartInContest')
                String text = '–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è: ' + Func.resolveUsername(winner) + ' –∏ ' + Func.resolveUsername(winner2) + '!\n--\n' + Const.INTROTEXT
                editMessage(text, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
            } else if (update.getCallbackQuery().getData() == '3winners') {
                answerCallbackQuery(update.getCallbackQuery().getId(), '–ü–æ–ª—É—á–∞–π –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!')
                def winner = db.srandmember('usersTakingPartInContest')
                db.srem('usersTakingPartInContest', winner)
                def winner2 = db.srandmember('usersTakingPartInContest')
                db.srem('usersTakingPartInContest', winner2)
                def winner3 = db.srandmember('usersTakingPartInContest')
                db.del('lastWinners')
                db.sadd('lastWinners', winner)
                db.sadd('lastWinners', winner2)
                db.sadd('lastWinners', winner3)
                db.set('contest', 'no')
                db.del('usersTakingPartInContest')
                String text = '–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è: ' + Func.resolveUsername(winner) + ', ' + Func.resolveUsername(winner2) + ' –∏ ' + Func.resolveUsername(winner3) + '!\n--\n' + Const.INTROTEXT
                editMessage(text, update.getCallbackQuery().getMessage().getChatId().toString(), update.getCallbackQuery().getMessage().getMessageId(), Func.getKeyboard(update.getCallbackQuery().getFrom().getId()), 'html')
            }
        }
    }

    private InlineKeyboardMarkup getCancelKeyboard() {
        def cancelBtn = new InlineKeyboardButton()
        cancelBtn.setText('–û—Ç–º–µ–Ω–∏—Ç—å')
        cancelBtn.setCallbackData('cancel')

        def kbd = new InlineKeyboardMarkup()
        kbd.setKeyboard([[cancelBtn]])

        return (kbd)
    }

    private InlineKeyboardMarkup getOkCancelKeyboard(String cat) {
        def cancelBtn = new InlineKeyboardButton()
        cancelBtn.setText('–û—Ç–º–µ–Ω–∏—Ç—å')
        cancelBtn.setCallbackData('cancel')
        def okBtn = new InlineKeyboardButton()
        okBtn.setText('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
        okBtn.setCallbackData('ok' + ':' + cat)

        def kbd = new InlineKeyboardMarkup()
        kbd.setKeyboard([[okBtn, cancelBtn]])

        return kbd
    }

    private InlineKeyboardMarkup getWinnersKeyboard() {
        def cancelBtn = new InlineKeyboardButton()
        cancelBtn.setText('–û—Ç–º–µ–Ω–∏—Ç—å')
        cancelBtn.setCallbackData('cancel')

        def userCnt = db.scard('usersTakingPartInContest')

        def oneWinnerBtn, twoWinnersBtn, threeWinnersBtn

        if (userCnt > 0) {
            oneWinnerBtn = new InlineKeyboardButton()
            oneWinnerBtn.setText('1 –ø–æ–±–µ–¥–∏—Ç–µ–ª—å')
            oneWinnerBtn.setCallbackData('1winner')
        }
        if (userCnt > 1) {
            twoWinnersBtn = new InlineKeyboardButton()
            twoWinnersBtn.setText('2 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è')
            twoWinnersBtn.setCallbackData('2winners')
        }
        if (userCnt > 2) {
            threeWinnersBtn = new InlineKeyboardButton()
            threeWinnersBtn.setText('3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è')
            threeWinnersBtn.setCallbackData('3winners')
        }

        def kbdRow1 = []
        if (oneWinnerBtn) { kbdRow1.add(oneWinnerBtn) }
        if (twoWinnersBtn) { kbdRow1.add(twoWinnersBtn) }
        def kbdRow2 = []
        if (threeWinnersBtn) { kbdRow2.add(threeWinnersBtn) }
        if (cancelBtn) { kbdRow2.add(cancelBtn) }

        def kbdRows = []
        if (kbdRow1.size() > 0) { kbdRows.add(kbdRow1) }
        kbdRows.add(kbdRow2)

        def kbd = new InlineKeyboardMarkup()
        kbd.setKeyboard(kbdRows)

        return kbd
    }

    private resetDBWait(cat, update) {
        db.del('waitingforpoem:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingforpoemmsg:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingforquote:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingforquotemsg:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingforauthor:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingforauthormsg:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingfordonate:' + update.getCallbackQuery().getFrom().getId())
        db.del('waitingfordonatemsg:' + update.getCallbackQuery().getFrom().getId())
        switch (cat) {
            case "poem":
                db.setex('waitingforpoem:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getChatId() as String)
                db.setex('waitingforpoemmsg:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getMessageId() as String)
                break
            case "quote":
                db.setex('waitingforquote:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getChatId() as String)
                db.setex('waitingforquotemsg:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getMessageId() as String)
                break
            case "author":
                db.setex('waitingforauthor:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getChatId() as String)
                db.setex('waitingforauthormsg:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getMessageId() as String)
                break
            case "donate":
                db.setex('waitingfordonate:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getChatId() as String)
                db.setex('waitingfordonatemsg:' + update.getCallbackQuery().getFrom().getId(), 60, update.getCallbackQuery().getMessage().getMessageId() as String)
                break
        }
    }
}
