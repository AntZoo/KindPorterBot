package eu.zujev.milovidobot.lib

import eu.zujev.milovidobot.DB
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton

class Func {
    private static db = DB.getInstance()
    private static config = new ConfigSlurper().parse(new File('config.groovy').toURL())

    static String checkLength(Update update, String text) {
        if (text.length() > 4096) {
            return '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤.'
        } else {
            return null
        }
    }

    static String dumbDownString(String input) {
        return input.toLowerCase()
                    .trim()
                    .replaceAll("\\p{P}", "")
                    .replaceAll("\\s+", " ")
    }

    static String resolveUsername(String id) {
        def name = db.hget('useridToName', id)
        if (name && name != '') {
            return '@' + name
        } else {
            name = db.hget('useridToName', id + ':name')
            if (name) {
                return '<a href="tg://user?id=' + id + '">' + name + '</a>'
            } else {
                return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #' + id + ' (—Å–∫—Ä—ã–ª –∏–º—è)'
            }
        }
    }

    static String randomPoem() {
        def answer = db.srandmember('poems').trim()
        if (answer) {
            answer = answer + '\n' + Const.CHANNEL_LINK
        } else {
            answer = '–í –±–∞–∑–µ –Ω–µ—Ç —Å–æ–≤—Å–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Å—Ç–∏—Ö–æ–≤. :('
        }
        return answer
    }

    static String randomPoem(String query) {
        def allPoems = db.smembers('poems')
        def formattedQuery = dumbDownString(query)
        def resultSet = allPoems.findAll { dumbDownString(it).contains(formattedQuery) }
        def answer = null
        if (resultSet.size() > 0) {
            answer = resultSet[new Random().nextInt(resultSet.size())].trim() + '\n' + Const.CHANNEL_LINK
        }
        return answer
    }

    static String randomQuote() {
        def answer = db.srandmember('quotes').trim()
        if (answer) {
            answer = "¬´" + answer + "¬ª\n\n‚Äî –í–∏ –ú–∏–ª–æ–≤–∏–¥–æ–≤–∞\n" + Const.CHANNEL_LINK
        } else {
            answer = '–í –±–∞–∑–µ –Ω–µ—Ç —Å–æ–≤—Å–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Ü–∏—Ç–∞—Ç. :('
        }
        return answer
    }

    static String randomQuote(String query) {
        def allPoems = db.smembers('quotes')
        def formattedQuery = dumbDownString(query)
        def resultSet = allPoems.findAll { dumbDownString(it).contains(formattedQuery) }
        def answer = null
        if (resultSet.size() > 0) {
            answer = resultSet[new Random().nextInt(resultSet.size())].trim()
        }
        if (answer) {
            answer = "¬´" + answer + "¬ª\n\n‚Äî –í–∏ –ú–∏–ª–æ–≤–∏–¥–æ–≤–∞\n" + Const.CHANNEL_LINK
        }
        return answer
    }

    static String aboutAuthor() {
        return db.get('author') ?: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. :('
    }

    static String donate() {
        return db.get('donate') ?: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–∞—Ç–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. :('
    }

    static InlineKeyboardMarkup getKeyboard(int User) {
        def contest = db.get('contest') ?: 'no'
        def alreadyTakingPart = db.sismember('usersTakingPartInContest', User.toString())

        def keyboard_row1 = []
        def poemkey = new InlineKeyboardButton()
        poemkey.setText('–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ')
        poemkey.setCallbackData('newpoem')
        def quotekey = new InlineKeyboardButton()
        quotekey.setText('–¶–∏—Ç–∞—Ç–∞')
        quotekey.setCallbackData('newquote')
        keyboard_row1.add(poemkey)
        keyboard_row1.add(quotekey)
        def keyboard_row2 = []
        def authorkey = new InlineKeyboardButton()
        authorkey.setText('–ê–≤—Ç–æ—Ä')
        authorkey.setCallbackData('aboutauthor')
        def donatekey = new InlineKeyboardButton()
        donatekey.setText('‚ÇΩ $ ‚Ç¨')
        donatekey.setCallbackData('donate')
        keyboard_row2.add(authorkey)
        keyboard_row2.add(donatekey)
        def keyboard_rows = []
        keyboard_rows.add(keyboard_row1)
        keyboard_rows.add(keyboard_row2)

        if (contest == 'yes' && !config.admins.contains(User)) {
            def contestkey = new InlineKeyboardButton()
            if (alreadyTakingPart) {
                contestkey.setText('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéâüéâüéâ')
                //contestkey.setText('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è')
                contestkey.setCallbackData('alreadyTakingPartInContest')
            } else {
                contestkey.setText('–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ')
                //contestkey.setText('‚ù§Ô∏è')
                contestkey.setCallbackData('takePartInContest')
            }
            def keyboard_row2andaHalf = []
            keyboard_row2andaHalf.add(contestkey)
            keyboard_rows.add(keyboard_row2andaHalf)
        }

        if (config.admins.contains(User)) {
            def keyboard_row3 = []
            def addpoemkey = new InlineKeyboardButton()
            addpoemkey.setText('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ')
            addpoemkey.setCallbackData('addpoem')
            def addquotekey = new InlineKeyboardButton()
            addquotekey.setText('–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É')
            addquotekey.setCallbackData('addquote')
            keyboard_row3.add(addpoemkey)
            keyboard_row3.add(addquotekey)
            def keyboard_row4 = []
            def addauthorkey = new InlineKeyboardButton()
            addauthorkey.setText('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ')
            addauthorkey.setCallbackData('addauthor')
            def adddonate = new InlineKeyboardButton()
            adddonate.setText('–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–Ω–∞—Ç')
            adddonate.setCallbackData('adddonate')
            keyboard_row4.add(addauthorkey)
            keyboard_row4.add(adddonate)
            def keyboard_row5 = []
            def startStopContestKey = new InlineKeyboardButton()
            if (contest == 'yes') {
                startStopContestKey.setText('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à')
                startStopContestKey.setCallbackData('stopcontest')
                def chooseWinnerKey = new InlineKeyboardButton()
                chooseWinnerKey.setText('–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è')
                chooseWinnerKey.setCallbackData('choosewinner')
                keyboard_row5.add(startStopContestKey)
                keyboard_row5.add(chooseWinnerKey)
            } else {
                startStopContestKey.setText('–ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à')
                startStopContestKey.setCallbackData('startcontest')
                keyboard_row5.add(startStopContestKey)
            }
            def keyboard_row6 = []
            def statskey = new InlineKeyboardButton()
            statskey.setText('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            statskey.setCallbackData('stats')
            keyboard_row6.add(statskey)
            keyboard_rows.add(keyboard_row3)
            keyboard_rows.add(keyboard_row4)
            keyboard_rows.add(keyboard_row5)
            keyboard_rows.add(keyboard_row6)
        }

        def kbd = new InlineKeyboardMarkup()
        kbd.setKeyboard(keyboard_rows)

        return kbd
    }

    static saveStats(Update update) {
        def userEntity = null
        if (update.hasMessage()) {
            userEntity = update.getMessage().getFrom()
        } else if (update.hasInlineQuery()) {
            userEntity = update.getInlineQuery().getFrom()
        } else if (update.hasCallbackQuery()) {
            userEntity = update.getCallbackQuery().getFrom()
        }
        def userId = userEntity.getId()

        if (userId && !config.admins.contains(userId)) {
            if (!!userEntity.getUserName()) {
                db.hset('useridToName', userId as String, userEntity.getUserName())
            }
            db.hset('useridToName', (userId as String) + ':name', userEntity.getFirstName() + (userEntity.getLastName() ?: ''))

            def chattype = null
            def group = null

            if (update.hasMessage()) {
                if (update.getMessage().isUserMessage()) {
                    chattype = 'pm'
                } else if (update.getMessage().isGroupMessage()) {
                    chattype = 'group'
                    group = update.getMessage().getChatId()
                }
            } else if (update.hasCallbackQuery()) {
                chattype = 'pm'
            } else if (update.hasInlineQuery()) {
                chattype = 'inline'
            }

            db.sadd('stats:users', userId as String)

            if (group) {
                db.sadd('stats:groups', group as String)
            }

            if (chattype == 'pm') {
                db.incr('stats:used:pm')
            } else if (chattype == 'inline') {
                db.incr('stats:used:inline')
            } else if (chattype == 'group') {
                db.incr('stats:used:group')
            }
        }
    }

    static saveUsage(String cat, int user) {
        if (cat && !config.admins.contains(user)) {
            db.incr('stats:' + cat)
            db.zincrby('usageByUser:' + cat, 1, user as String)
            db.zincrby('usageByUser:all', 1, user as String)
        }
    }

    static getStatsText() {
        def totalUsers = db.scard('stats:users') ?: 0
        def totalGroups = db.scard('stats:groups') ?: 0
        def usedInPM = db.get('stats:used:pm') ?: 0
        def usedInGroups = db.get('stats:used:group') ?: 0
        def usedInline = db.get('stats:used:inline') ?: 0
        def poemsRequested = db.get('stats:poem') ?: 0
        def quotesRequested = db.get('stats:quote') ?: 0
        def topThreePoems = db.zrevrangeWithScores('usageByUser:poem',0,2) ?: []
        def topThreeQuotes = db.zrevrangeWithScores('usageByUser:quote',0,2) ?: []
        def topThreeOverall = db.zrevrangeWithScores('usageByUser:all',0,2) ?: []
        def contestRunning = db.get('contest') ?: 'no'
        def usersInContest = db.scard('usersTakingPartInContest')

        def head = '–í–æ—Ç —Ç–∞–∫–∞—è —É –Ω–∞—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n\n'

        def contestText = ''
        if (contestRunning == 'yes') {
            def users = (usersInContest.toString().reverse().take(1) == '1' && usersInContest.toString().reverse().take(2) != '11') ? usersInContest + ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.' : usersInContest + ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
            contestText = '–í–æ-–ø–µ—Ä–≤—ã—Ö, —É –Ω–∞—Å –∏–¥—ë—Ç —Ä–æ–∑—ã–≥—Ä—ã—à. –ü–æ–∫–∞ —á—Ç–æ —è –Ω–∞—Å–æ–±–∏—Ä–∞–ª ' + users + (usersInContest == 0 ? ' :( ' : '') + '\n\n'
        }

        def lastWinners = db.smembers('lastWinners')
        if (lastWinners.size() > 0) {
            contestText += '–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ '
            if (lastWinners.size() == 1) {
                contestText += '–ø–æ–±–µ–¥–∏–ª(–∞) ' + resolveUsername(lastWinners[0]) + '.'
            } else if (lastWinners.size() == 2) {
                contestText += '–ø–æ–±–µ–¥–∏–ª–∏ ' + resolveUsername(lastWinners[0]) + ' –∏ ' + resolveUsername(lastWinners[1]) + '.'
            } else if (lastWinners.size() == 3) {
                contestText += '–ø–æ–±–µ–¥–∏–ª–∏ ' + resolveUsername(lastWinners[0]) + ', ' + resolveUsername(lastWinners[1]) + ' –∏ ' + resolveUsername(lastWinners[2]) + '.'
            }
            contestText += '\n\n'
        }

        def unique = '–í—Å–µ–≥–æ —Å–æ –º–Ω–æ–π –æ–±—â–∞–ª–æ—Å—å\n' +
                '- —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <pre>' + totalUsers + '</pre>;\n' +
                '- —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: <pre>' + totalGroups + '</pre>.\n\n'

        def loc = '–ú–µ–Ω—è —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏\n' +
                '- –≤ –≥—Ä—É–ø–ø–µ: <pre>' + usedInGroups + '</pre> —Ä–∞–∑(–∞);\n' +
                '- –≤ –ª–∏—á–∫–µ: <pre>' + usedInPM + '</pre> —Ä–∞–∑(–∞);\n' +
                '- –∏–Ω–ª–∞–π–Ω–æ–º: <pre>' + usedInline + '</pre> —Ä–∞–∑(–∞).\n\n'

        def total = '–í—Å–µ–≥–æ —è —É—Å–ø–µ–ª —Ä–∞–∑–¥–∞—Ç—å\n' +
                '- —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π: <pre>' + poemsRequested + '</pre>;\n' +
                '- —Ü–∏—Ç–∞—Ç: <pre>' + quotesRequested + '</pre>.\n\n'

        def top3 = ''
        if (topThreeOverall.size() == 3 && topThreePoems.size() == 3 && topThreeQuotes.size() == 3) {
            top3 = '–ù–µ–±–æ–ª—å—à–æ–π —Ç–æ–ø.\n\n–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å—Ç–∏—Ö–æ–≤ –ø—Ä–æ—Å–∏–ª–∏:\n'

            def index = 1
            topThreePoems.each { tup ->
                tup.each { prop ->
                    top3 = top3 + index + '. ' + resolveUsername(prop['element'] as String) + ': <pre>' + (prop['score'] as Integer) + '</pre>\n'
                    index++
                }
            }

            top3 = top3 + '\n–¶–∏—Ç–∞—Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:\n'

            index = 1
            topThreeQuotes.each { tup ->
                tup.each { prop ->
                    top3 = top3 + index + '. ' + resolveUsername(prop['element'] as String) + ': <pre>' + (prop['score'] as Integer) + '</pre>\n'
                    index++
                }
            }

            top3 = top3 + '\n–ù—É –∞ —Å–∞–º—ã–µ –ª—é–±–æ–ø—ã—Ç–Ω—ã–µ –∑–¥–µ—Å—å:\n'

            index = 1
            topThreeOverall.each { tup ->
                tup.each { prop ->
                    top3 = top3 + index + '. ' + resolveUsername(prop['element'] as String) + ': <pre>' + (prop['score'] as Integer) + '</pre>\n'
                    index++
                }
            }
        }

        return head + contestText + unique + loc + total + top3
    }
}